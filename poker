# -*-coding:utf-8 -*
# Programme testant si une année, saisie par l'utilisateur, est bissextile ou non

deck = [

["1","S"], ["2","S"], ["3","S"], ["4","S"], ["5","S"], ["6","S"], ["7","S"], ["8","S"], ["9","S"], ["10","S"], ["V","S"], ["D","S"], ["R","S"],

["1","H"], ["2","H"], ["3","H"], ["4","H"], ["5","H"], ["6","H"], ["7","H"], ["8","H"], ["9","H"], ["10","H"], ["V","H"], ["D","H"], ["R","H"],

["1","D"], ["2","D"], ["3","D"], ["4","D"], ["5","D"], ["6","D"], ["7","D"], ["8","D"], ["9","D"], ["10","D"], ["V","D"], ["D","D"], ["R","D"],

["1","C"], ["2","C"], ["3","C"], ["4","C"], ["5","C"], ["6","C"], ["7","C"], ["8","C"], ["9","C"], ["10","C"], ["V","C"], ["D","C"], ["R","C"]

]

deck_full = list(deck)

def displayCards(*cards):
    """Test """
    output = ""
    for i in range(1, len(cards)/2 + 1):
        if cards[2*i - 2] <= 10: # Card number
		    output += str(cards[2*i - 2])
        elif cards[2*i - 2] == 11:
		    output += "J"
        elif cards[2*i - 2] == 12:
		    output += "Q"
        else:
		    output += "K"
        if cards[2*i - 1] <= 1:
            output += "S " # "♠" # "Spades "
        elif cards[2*i - 1] == 2:
            output += "H " # Hearts "
        elif cards[2*i - 1] == 3:
            output += "D " # Diamonds "
        elif cards[2*i - 1] >= 4:
            output += "C "
    print output[0:(len(output)-1)]

# Hand

 

nInHand = [0,0,0,0,0,0,0,0,0,0,0,0,0]

nColInHand = [0]*4

def input_card(hand1):
	if hand1[1] == "1" or hand1[1] == "2" or hand1[1] == "3":
		first_chars = hand1[:2]
		last_chars = hand1[2:].lower()
	else:
		first_chars = hand1[0]
		last_chars = hand1[1:].lower()

	# Card number
	hand1n = 0
	try:
		hand1n = int(first_chars)
	except ValueError:
		if first_chars.lower() == "j" or first_chars.lower() == "v":
			hand1n = 11
		elif first_chars.lower() == "q" or first_chars.lower() == "d":
			hand1n = 12		
		elif first_chars.lower() == "k" or first_chars.lower() == "r":
			hand1n = 13 	
		elif first_chars.lower() == "a":
			hand1n = 1 	
				
	# Colour
	hand1c = 0
	if last_chars[0] == "s" or last_chars[0] == "p":
		hand1c = 1
	elif last_chars[0] == "h" or last_chars[0:2] == "co":
		hand1c = 2			
	elif last_chars[0] == "d" or last_chars[0:2] == "ca":
		hand1c = 3	
	elif last_chars[0] == "c" or last_chars[0] == "t":
		hand1c = 4

	return hand1c, hand1n
		

hand1 = raw_input("Hand, card 1: ")
hand1c, hand1n = input_card(hand1)
print(str(hand1n) + "/" + str(hand1c))

hand2 = raw_input("Hand, card 2: ")
hand2c, hand2n = input_card(hand2)
print(str(hand2n) + "/" + str(hand2c))

hand = [["",""],["",""]]

hand[0] = deck_full[hand1n + 13*(hand1c - 1) - 1]

hand[1] = deck_full[hand2n + 13*(hand2c - 1) - 1]

deck.remove(hand[0])

deck.remove(hand[1])

displayCards(hand1n, hand1c, hand2n, hand2c)

nInHand[hand1n - 1] += 1

nInHand[hand2n - 1] += 1

nColInHand[hand1c - 1] += 1

nColInHand[hand2c - 1] += 1

print(nColInHand)

 

# Flop

 

nInFlop = [0,0,0,0,0,0,0,0,0,0,0,0,0]

nColInFlop = [0]*4

flop1 = raw_input("Flop, card 1: ")
flop1c, flop1n = input_card(flop1)
print(str(flop1n) + "/" + str(flop1c))

flop2 = raw_input("Flop, card 2: ")
flop2c, flop2n = input_card(flop2)
print(str(flop2n) + "/" + str(flop2c))

flop3 = raw_input("Flop, card 3: ")
flop3c, flop3n = input_card(flop3)
print(str(flop3n) + "/" + str(flop3c))

flop = [["",""],["",""],["",""]]

flop[0] = deck_full[flop1n + 13*(flop1c - 1) - 1]

flop[1] = deck_full[flop2n + 13*(flop2c - 1) - 1]

flop[2] = deck_full[flop3n + 13*(flop3c - 1) - 1]

deck.remove(flop[0])

deck.remove(flop[1])

deck.remove(flop[2])

displayCards(flop1n, flop1c, flop2n, flop2c, flop3n, flop3c)

print(deck)

nInFlop[flop1n - 1] += 1

nInFlop[flop2n - 1] += 1

nInFlop[flop3n - 1] += 1

nColInFlop[flop1c - 1] += 1

nColInFlop[flop2c - 1] += 1

nColInFlop[flop3c - 1] += 1

print(nColInFlop)


def printProbas(nInFlop, nInHand):    
    lengthDeck = 52 - sum(nInFlop) - sum(nInHand)
    # Probability of pairs
    # 
    # probaPairs = [1]*13
    # for i in range(1, 14):
    # 	nTerms = 2 - nInFlop[i - 1]
    # 	while nTerms > 0:
    # 		probaPairs[i - 1] = probaPairs[i - 1]/(len(deck) - nTerms + 1)
    # 		probaPairs[i - 1] = probaPairs[i - 1]*(2 + nTerms - nInHand[i - 1])
    # 		nTerms = nTerms - 1
    # 	
    # Probability of threes
    # 	
    # probaThrees = [1]*13
    # for i in range(1, 14):
    # 	nTerms = 3 - nInFlop[i - 1]
    #	if nTerms == 3:
    # 		probaThrees[i - 1] = 0
    # 	else:
    # 		while nTerms > 0:
    # 			probaThrees[i - 1] = probaThrees[i - 1]/(len(deck) - nTerms + 1)
    # 			probaThrees[i - 1] = probaThrees[i - 1]*(1 + nTerms - nInHand[i - 1])
    # 			nTerms = nTerms - 1
    # 
    # Probability of fours
    # 	
    # probaFours = [1]*13
    # for i in range(1, 14):
	#     nTerms = 4 - nInFlop[i - 1]
	#     if nTerms >= 3:
	# 	    probaFours[i - 1] = 0
	#     else:
	# 	    while nTerms > 0:
	# 		    probaFours[i - 1] = probaFours[i - 1]/(lengthDeck - nTerms + 1)
	# 		    probaFours[i - 1] = probaFours[i - 1]*(nTerms - nInHand[i - 1])
	# 		    nTerms = nTerms - 1
    
    # Probability of two pairs + probability of fulls
    
    probaPairs = [1]*13
    proba2Pairs = [[-1 for i in range(13)] for j in range(13)]
    probaFulls = [[-1 for i in range(13)] for j in range(13)]
    probaThrees = [1]*13
    for i in range(1, 14):
        if nInFlop[i - 1] == 0:
            if sum(nInFlop) >= 3: # If 3, 4 or 5 cards on the table, and none with value i
                probaThrees[i - 1] = 0
            else:
                probaThrees[i - 1] = (4 - nInHand[i-1])/lengthDeck*(3 - nInHand[i-1])/(lengthDeck - 1)*(2 - nInHand[i-1])/(lengthDeck - 2)
            probaPairs[i - 1] = (4 - nInHand[i-1])/lengthDeck*(3 - nInHand[i-1])/(lengthDeck - 1)
            for j in range(1, 14):
                if i == j:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(2 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 2)*(1 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 3)					
                    probaFulls[i - 1][j - 1] = 0
                else:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 2)*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 3)
                    probaFulls[i - 1][j - 1] = 0
        elif nInFlop[i - 1] == 1:
            probaThrees[i - 1] = (3 - nInHand[i-1])/lengthDeck*(2 - nInHand[i-1])/(lengthDeck - 1)
            probaPairs[i - 1] = (3 - nInHand[i-1])/lengthDeck
            for j in range(1, 14):
                if i == j:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(2 - nInHand[j - 1])/(lengthDeck - 1)*(1 - nInHand[j - 1])/(lengthDeck - 2)
                    probaFulls[i - 1][j - 1] = 0
                else:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 2)
                    probaFulls[i - 1][j - 1] = probaThrees[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 2)*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 3)
        elif nInFlop[i - 1] == 2:
            probaPairs[i - 1] = 1
            probaThrees[i - 1] = (2 - nInHand[i-1])/lengthDeck
            for j in range(1, 14):
                if i == j:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(2 - nInHand[j - 1])/lengthDeck*(1 - nInHand[j - 1])/(lengthDeck - 1)
                    probaFulls[i - 1][j - 1] = 0
                else:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/lengthDeck*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)
                    probaFulls[i - 1][j - 1] = probaThrees[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 2)
        elif nInFlop[i - 1] == 3:
            probaPairs[i - 1] = 1
            probaThrees[i - 1] = 1
            for j in range(1, 14):
                if i == j:
                    proba2Pairs[i - 1][j - 1] = (1 - nInHand[j - 1])/lengthDeck
                    probaFulls[i - 1][j - 1] = 0
                else:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/lengthDeck*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)
                    probaFulls[i - 1][j - 1] = probaThrees[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/lengthDeck*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)
        elif nInFlop[i - 1] == 4:
            probaPairs[i - 1] = 1
            probaThrees[i - 1] = 1
            for j in range(1, 14):
                if i == j:
                    proba2Pairs[i - 1][j - 1] = 1
                    probaFulls[i - 1][j - 1] = 0
                else:
                    proba2Pairs[i - 1][j - 1] = probaPairs[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/lengthDeck*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)
                    probaFulls[i - 1][j - 1] = probaThrees[i - 1]*(4 - nInHand[j - 1] - nInFlop[j - 1])/lengthDeck*(3 - nInHand[j - 1] - nInFlop[j - 1])/(lengthDeck - 1)
    print(str(proba2Pairs[0][0]) + "/" + str(proba2Pairs[1][1]) + "/" + str(proba2Pairs[2][2]) + "/" + str(proba2Pairs[3][3]) + "/" + str(proba2Pairs[4][4]) + "/" + str(proba2Pairs[5][5]) + "/" \
        + str(proba2Pairs[6][6]) + "/" + str(proba2Pairs[7][7]) + "/" + str(proba2Pairs[8][8]) + "/" + str(proba2Pairs[9][9]) + "/" + str(proba2Pairs[10][10]) + "/" + str(proba2Pairs[11][11]) + "/" \
        + str(proba2Pairs[12][12]))

printProbas(nInFlop, nInHand)
nInFlop[3 - 1] += 1
printProbas(nInFlop, nInHand)
nInFlop[3 - 1] += 1
printProbas(nInFlop, nInHand)

# Probability of straights

probaStraight = [-1]*10
# gapFlop = min(abs(flop1n - flop2n), abs(flop1n - flop3n)) + abs(flop3n - flop2n) - 2

for i in range(1, 11): # From 1 to 10
    if i == 10:
        sequence = nInFlop[9:] + [nInFlop[0]]
    else:
        sequence = nInFlop[(i - 1):(i + 4)]
    if sequence.count(0) > 2: # More than two gaps
        probaStraight[i - 1] = 0
    elif sequence.count(0) == 2: # Two gaps
        indexGap = i - 1 + sequence.index(0) # Find the gap
        indexGap2 = indexGap + 1 + nInFlop[(indexGap + 1):(i + 4)].index(0) # Find the gap
        probaStraight[i - 1] = (4 - nInHand[indexGap] - nInFlop[indexGap])/len(deck)*(4 - nInHand[indexGap2] - nInFlop[indexGap2])/(len(deck) - 1)
    elif sequence.count(0) == 1: # One gap
        indexGap = sequence.index(0) # Find the gap
        probaStraight[i - 1] = (4 - nInHand[indexGap] - nInFlop[indexGap])/len(deck)
    else: # Zero gap (straight is on the table)
        probaStraight[i - 1] = 1

# Probability of Flush

probaFlush = [-1]*4
for i in range(1, 5): # From 1 to 4
    if nColInFlop[i - 1] <= 2:
        probaFlush[i - 1] = 0
    elif nColInFlop[i - 1] == 3:
        probaFlush[i - 1] = (13 - nColInHand[i - 1] - nColInFlop[i - 1])/len(deck)*(12 - nColInHand[i - 1] - nColInFlop[i - 1])/(len(deck) - 1)
    elif nColInFlop[i - 1] == 4:
        probaFlush[i - 1] = (13 - nColInHand[i - 1] - nColInFlop[i - 1])/len(deck)
    elif nColInFlop[i - 1] == 5: # Flush is on the table
        probaFlush[i - 1] = 1

print(probaFlush)

# Probability of Flush - more compact
# 
# probaFlush = [1]*4
# for i in range(1, 5): # From 1 to 4
# 	nTerms = 5 - nColInFlop[i - 1]
# 	if nTerms >= 3:
# 		probaFlush[i - 1] = 0
# 	else:
# 		while nTerms > 0:
# 			probaFlush[i - 1] = probaFlush[i - 1]*(14 - nTerms - nColInHand[i - 1] - nColInFlop[i - 1])
#			probaFlush[i - 1] = probaFlush[i - 1]/(len(deck) - nTerms + 1)
#			nTerms = nTerms - 1
